name: Auto-Generate Index

on:
  push:
    paths:
      - '**.md'
      - '**.py'
      - '**.yml'
    branches:
      - main

permissions:
  contents: write

jobs:
  generate-index:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate INDEX_Checklist_Docs.md
        run: |
          #!/bin/bash
          set -e
          
          # Get current Unix timestamp
          TIMESTAMP=$(date +%s)
          
          # Repository info
          REPO_USER="2mrowman"
          REPO_NAME="hob-kb-archives-72A1"
          BASE_URL="https://raw.githubusercontent.com/${REPO_USER}/${REPO_NAME}/refs/heads/main"
          
          # Output file
          OUTPUT_FILE="INDEX_Checklist_Docs.md"
          
          # Start building the index file
          echo "# INDEX_Checklist_Docs.md" > "$OUTPUT_FILE"
          echo "**Auto-Generated Documentation Index**" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "**Repository:** hob-kb-archives-72A1" >> "$OUTPUT_FILE"
          echo "**Generated:** $(date '+%d/%m/%Y - %H:%M') (GMT+3)" >> "$OUTPUT_FILE"
          echo "**Timestamp:** $TIMESTAMP" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "---" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "## Purpose" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "This file is **auto-generated** by GitHub Actions whenever any \`.md\`, \`.py\`, or \`.yml\` file is modified in the repository." >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "All RAW GitHub URLs include cache-busting timestamps (\`?ts=$TIMESTAMP\`) to ensure ChecklistGPT always reads the latest version of each file." >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "---" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "## Documentation Structure" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          
          # Function to add files from a directory
          add_section() {
            local section_title="$1"
            local search_path="$2"
            
            echo "" >> "$OUTPUT_FILE"
            echo "### $section_title" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            
            # Find files matching pattern in the specified path
            local found_files=false
            
            while IFS= read -r file; do
              if [ -n "$file" ]; then
                found_files=true
                # Get relative path from repo root
                rel_path="${file#./}"
                # URL encode the path
                encoded_path=$(echo "$rel_path" | sed 's/ /%20/g')
                # Get filename
                filename=$(basename "$file")
                
                # Determine file type marker
                case "${filename##*.}" in
                  md) file_type="[MD]" ;;
                  py) file_type="[PY]" ;;
                  yml|yaml) file_type="[YML]" ;;
                  *) file_type="[FILE]" ;;
                esac
                
                # Add entry
                echo "- $file_type **[$filename]($BASE_URL/$encoded_path?ts=$TIMESTAMP)**" >> "$OUTPUT_FILE"
                echo "  \`$rel_path\`" >> "$OUTPUT_FILE"
              fi
            done < <(find "$search_path" -maxdepth 1 -type f \( -name "*.md" -o -name "*.py" -o -name "*.yml" \) 2>/dev/null | sort)
            
            if [ "$found_files" = false ]; then
              echo "*No files found in this section.*" >> "$OUTPUT_FILE"
            fi
            
            echo "" >> "$OUTPUT_FILE"
          }
          
          # Add sections organized by folder structure
          
          # Root level files
          add_section "Root Level" "."
          
          # /docs/ folder
          if [ -d "docs" ]; then
            add_section "Documentation (/docs/)" "docs"
          fi
          
          # /docs/history/ folder
          if [ -d "docs/history" ]; then
            add_section "Version History (/docs/history/)" "docs/history"
          fi
          
          # /libraries/ folder
          if [ -d "libraries" ]; then
            add_section "Libraries (/libraries/)" "libraries"
          fi
          
          # /scripts/ folder
          if [ -d "scripts" ]; then
            add_section "Scripts (/scripts/)" "scripts"
          fi
          
          # /tests/ folder
          if [ -d "tests" ]; then
            add_section "Tests (/tests/)" "tests"
          fi
          
          # Add footer
          echo "---" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "## Auto-Update Information" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "**Trigger:** This index is automatically regenerated whenever any \`.md\`, \`.py\`, or \`.yml\` file is pushed to the \`main\` branch." >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "**Workflow:** \`.github/workflows/auto-generate-index.yml\`" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "**Cache-Busting:** All URLs include \`?ts=<timestamp>\` to force fresh reads by ChecklistGPT." >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "---" >> "$OUTPUT_FILE"
          echo "" >> "$OUTPUT_FILE"
          echo "**Last Updated:** $(date '+%d/%m/%Y - %H:%M') (GMT+3)" >> "$OUTPUT_FILE"
          echo "**Automation Status:** Active" >> "$OUTPUT_FILE"
          
          echo "INDEX_Checklist_Docs.md generated successfully!"
          echo "Timestamp: $TIMESTAMP"

      - name: Commit and push if changed
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes
          if git diff --quiet INDEX_Checklist_Docs.md; then
            echo "No changes to INDEX_Checklist_Docs.md"
          else
            git add INDEX_Checklist_Docs.md
            git commit -m "Auto-update INDEX_Checklist_Docs.md [skip ci]"
            git push
            echo "INDEX_Checklist_Docs.md updated and pushed"
          fi

