name: Auto-stamp KB (Last updated + Build)

on:
  push:
    branches: [ "main" ]
    paths:
      - "*.md"               # όλα τα .md στο root (README.md, SYSTEM_OVERVIEW.md, SCRIPT_IDS_INDEX.md, κ.λπ.)
      - "docs/**"
      - "libraries/**"
      - "scripts/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  stamp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Write Athens time + short SHA into many files
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          python - <<'PY'
          import re, glob, os
          from datetime import datetime
          from zoneinfo import ZoneInfo
          ATH="Europe/Athens"
          now = datetime.now(ZoneInfo(ATH)).strftime("%d/%m/%Y – %H:%M")

          # Σταθεροί στόχοι (αν υπάρχουν στο repo)
          targets = [
            "notes_for_gpt.md",
            "index.md",
            "INDEX_Checklist_Docs.md",
            "RAW_LINKS_INDEX.md",
          ]

          # + Όλα τα .md από τους φακέλους
          for g in ("docs/*.md","libraries/*.md","scripts/*.md"):
              targets.extend(glob.glob(g))

          def stamp(path):
              if not os.path.exists(path): 
                  return
              with open(path,"r",encoding="utf-8") as f:
                  t=f.read()

              def set_line(txt, key, val):
                  pat = rf"(?im)^\*{key}\s*:\s*.*$"
                  line = f"*{key}: {val}*"
                  if re.search(pat, txt):
                      return re.sub(pat, line, txt)
                  # Αν δεν υπάρχει, βάλ’ το στην κορυφή (πάνω-πάνω)
                  return line + "\n" + txt

              t = set_line(t, "Last updated", f"{now} (Europe/Athens)")
              t = set_line(t, "Build", "${SHORT_SHA}")

              with open(path,"w",encoding="utf-8") as f:
                  f.write(t)

          # Αφαίρεσε διπλές εγγραφές κρατώντας σειρά/μοναδικότητα
          seen=set(); ordered=[]
          for p in targets:
              if p not in seen:
                  seen.add(p); ordered.append(p)

          for p in ordered:
              stamp(p)
          PY

      - name: Commit changes (if any)
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "kb-bot"
            git config user.email "kb-bot@users.noreply.github.com"
            git add -A
            git commit -m "ci: auto-stamp KB (Last updated + Build)"
            git push
          else
            echo "No changes to commit."
          fi
